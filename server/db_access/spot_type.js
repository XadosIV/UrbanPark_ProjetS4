const {dbConnection} = require('../database');
const Errors = require('../errors');

/**
 * GetSpotTypes
 * Get all spot types matching parameters
 * 
 * @param {function(*,*)} callback (err, data)
 * @param {object} infos {id_spot, name}
 */
function GetSpotTypes(callback, infos){
	//Don't ask why this is that hard, only @UP-4303 knows
	//We could've did it in 2 separate functions, but what is life without challenge ?
	let sql = `SELECT t.name FROM Typed y
		RIGHT JOIN Type t ON t.name=y.name_type
		WHERE t.name LIKE :name
		GROUP BY t.Name
		HAVING MAX(case when y.id_spot LIKE :id_spot OR "%" = :id_spot then 1 else 0 end);`;
	console.log("SQL at GetSpotTypes : " + sql);
	dbConnection.query(sql, {
        id_spot:infos.id_spot||'%',
		name:infos.name||'%'
    },callback);
}

/**
 * SpotTypeExists
 * Does this spot type exists ?
 * 
 * @param {string} name
 * @param {function(*,*)} callback (err, boolean)
 */
function SpotTypeExists(name, callback) {
	let sql = `SELECT name FROM Type WHERE name LIKE :name;`;
	console.log("SQL at GetSpotTypes : " + sql);
	dbConnection.query(sql, {
        name:name
    },(err, data) => {
		if (err){
			callback(err, false);
		}else{
			callback(err, data.length==1);
		}
	});
}

/**
 * IsValidSpotType
 * Check if the string is a valid spot type
 * 
 * @param {string} st 
 * 
 * @return {boolean}
 */
function IsValidSpotType(st){
	return st.match(/^[A-Za-z]+$/);
}


/**
 * PostSpotType
 * Create a new user with "AbonnÃ©" role
 * 
 * @param {function(*,*)} callback (err, data)
 * @param {object} infos {name}
 */
function PostSpotType(callback, infos){
	if (!IsValidSpotType(infos.name)){
		let errorCode = Errors.E_SPOT_TYPE_FORMAT_INVALID;
		let error = new Error(errorCode);
		error.code = errorCode;
		callback(error,[]);
	}else{
		GetSpotTypes((err, data) => {
			if (err) { // Not generated by us
				callback(err,data);
			}else if (data.length != 0){ // Spot type name already used
				let errorCode = Errors.E_SPOT_TYPE_ALREADY_EXIST;
				let error = new Error(errorCode);
				error.code = errorCode;
				callback(error,data);
			}else{
				let sql=`INSERT INTO Type (name) VALUES (:name);`;
				//console.log("SQL at PostUser : " + sql + " with " + JSON.stringify(infos));
				dbConnection.query(sql, infos, callback);
			}
		}, {name:infos.name});
	}
}

/**
 * DeleteSpotType
 * Delete all the types from a place by the place's id
 * 
 * @param {function(*,*)} callback (err, data)
 * @param {int} id
 */
function DeleteSpotType (callback, id){
	let sql = `DELETE FROM Typed WHERE id_spot=:id`
	dbConnection.query(sql,{
		id:id
	}, (err, data) => {
		callback(err, data);
	});
}
module.exports = {GetSpotTypes, SpotTypeExists, PostSpotType, DeleteSpotType};
